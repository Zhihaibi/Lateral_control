// Generated by gencpp from file common_msgs/Lane.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_LANE_H
#define COMMON_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : lane_idx(0)
    , c_0(0.0)
    , c_1(0.0)
    , c_2(0.0)
    , c_3(0.0)  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : lane_idx(0)
    , c_0(0.0)
    , c_1(0.0)
    , c_2(0.0)
    , c_3(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _lane_idx_type;
  _lane_idx_type lane_idx;

   typedef float _c_0_type;
  _c_0_type c_0;

   typedef float _c_1_type;
  _c_1_type c_1;

   typedef float _c_2_type;
  _c_2_type c_2;

   typedef float _c_3_type;
  _c_3_type c_3;





  typedef boost::shared_ptr< ::common_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::common_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::common_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::common_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Lane_<ContainerAllocator1> & lhs, const ::common_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return lhs.lane_idx == rhs.lane_idx &&
    lhs.c_0 == rhs.c_0 &&
    lhs.c_1 == rhs.c_1 &&
    lhs.c_2 == rhs.c_2 &&
    lhs.c_3 == rhs.c_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Lane_<ContainerAllocator1> & lhs, const ::common_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6ece6904fb62b4ebe5a720f5abf96c2";
  }

  static const char* value(const ::common_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6ece6904fb62b4eULL;
  static const uint64_t static_value2 = 0xbe5a720f5abf96c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Lane";
  }

  static const char* value(const ::common_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 单条车道线描述\n"
"uint8 lane_idx #车道线ID\n"
"float32 c_0    #车道线参数C0\n"
"float32 c_1    #车道线参数C1\n"
"float32 c_2    #车道线参数C2\n"
"float32 c_3    #车道线参数C3\n"
;
  }

  static const char* value(const ::common_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_idx);
      stream.next(m.c_0);
      stream.next(m.c_1);
      stream.next(m.c_2);
      stream.next(m.c_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "lane_idx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_idx);
    s << indent << "c_0: ";
    Printer<float>::stream(s, indent + "  ", v.c_0);
    s << indent << "c_1: ";
    Printer<float>::stream(s, indent + "  ", v.c_1);
    s << indent << "c_2: ";
    Printer<float>::stream(s, indent + "  ", v.c_2);
    s << indent << "c_3: ";
    Printer<float>::stream(s, indent + "  ", v.c_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_LANE_H
