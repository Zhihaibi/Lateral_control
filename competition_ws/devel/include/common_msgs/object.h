// Generated by gencpp from file common_msgs/object.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_OBJECT_H
#define COMMON_MSGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct object_
{
  typedef object_<ContainerAllocator> Type;

  object_()
    : Object_ID(0)
    , Object_DistLong(0.0)
    , Object_DistLat(0.0)
    , Object_VrelLong(0.0)
    , Object_VrelLat(0.0)
    , Object_DynProp(0)
    , Object_ArelLong(0.0)
    , Object_ArelLat(0.0)
    , Object_Class(0)
    , Object_Length(0.0)
    , Object_Width(0.0)
    , Object_ProbOfExist(0)  {
    }
  object_(const ContainerAllocator& _alloc)
    : Object_ID(0)
    , Object_DistLong(0.0)
    , Object_DistLat(0.0)
    , Object_VrelLong(0.0)
    , Object_VrelLat(0.0)
    , Object_DynProp(0)
    , Object_ArelLong(0.0)
    , Object_ArelLat(0.0)
    , Object_Class(0)
    , Object_Length(0.0)
    , Object_Width(0.0)
    , Object_ProbOfExist(0)  {
  (void)_alloc;
    }



   typedef uint32_t _Object_ID_type;
  _Object_ID_type Object_ID;

   typedef float _Object_DistLong_type;
  _Object_DistLong_type Object_DistLong;

   typedef float _Object_DistLat_type;
  _Object_DistLat_type Object_DistLat;

   typedef float _Object_VrelLong_type;
  _Object_VrelLong_type Object_VrelLong;

   typedef float _Object_VrelLat_type;
  _Object_VrelLat_type Object_VrelLat;

   typedef uint32_t _Object_DynProp_type;
  _Object_DynProp_type Object_DynProp;

   typedef float _Object_ArelLong_type;
  _Object_ArelLong_type Object_ArelLong;

   typedef float _Object_ArelLat_type;
  _Object_ArelLat_type Object_ArelLat;

   typedef uint32_t _Object_Class_type;
  _Object_Class_type Object_Class;

   typedef float _Object_Length_type;
  _Object_Length_type Object_Length;

   typedef float _Object_Width_type;
  _Object_Width_type Object_Width;

   typedef uint32_t _Object_ProbOfExist_type;
  _Object_ProbOfExist_type Object_ProbOfExist;





  typedef boost::shared_ptr< ::common_msgs::object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::object_<ContainerAllocator> const> ConstPtr;

}; // struct object_

typedef ::common_msgs::object_<std::allocator<void> > object;

typedef boost::shared_ptr< ::common_msgs::object > objectPtr;
typedef boost::shared_ptr< ::common_msgs::object const> objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::object_<ContainerAllocator1> & lhs, const ::common_msgs::object_<ContainerAllocator2> & rhs)
{
  return lhs.Object_ID == rhs.Object_ID &&
    lhs.Object_DistLong == rhs.Object_DistLong &&
    lhs.Object_DistLat == rhs.Object_DistLat &&
    lhs.Object_VrelLong == rhs.Object_VrelLong &&
    lhs.Object_VrelLat == rhs.Object_VrelLat &&
    lhs.Object_DynProp == rhs.Object_DynProp &&
    lhs.Object_ArelLong == rhs.Object_ArelLong &&
    lhs.Object_ArelLat == rhs.Object_ArelLat &&
    lhs.Object_Class == rhs.Object_Class &&
    lhs.Object_Length == rhs.Object_Length &&
    lhs.Object_Width == rhs.Object_Width &&
    lhs.Object_ProbOfExist == rhs.Object_ProbOfExist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::object_<ContainerAllocator1> & lhs, const ::common_msgs::object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c59d4e1031406f14a432b85c2df4e43d";
  }

  static const char* value(const ::common_msgs::object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc59d4e1031406f14ULL;
  static const uint64_t static_value2 = 0xa432b85c2df4e43dULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/object";
  }

  static const char* value(const ::common_msgs::object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 Object_ID                        #目标的ID编号\n"
"float32 Object_DistLong                 #目标的纵向距离\n"
"float32 Object_DistLat                  #目标的横向距离\n"
"float32 Object_VrelLong                 #目标的纵向相对速度\n"
"float32 Object_VrelLat                  #目标的横向相对速度\n"
"uint32 Object_DynProp                   #目标的运动状态\n"
"float32 Object_ArelLong                 #目标的纵向加速度\n"
"float32 Object_ArelLat                  #目标的横向加速度\n"
"uint32 Object_Class                     #目标的分类\n"
"float32 Object_Length                   #目标的长度\n"
"float32 Object_Width                    #目标的宽度\n"
"uint32 Object_ProbOfExist               #目标置信度\n"
;
  }

  static const char* value(const ::common_msgs::object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Object_ID);
      stream.next(m.Object_DistLong);
      stream.next(m.Object_DistLat);
      stream.next(m.Object_VrelLong);
      stream.next(m.Object_VrelLat);
      stream.next(m.Object_DynProp);
      stream.next(m.Object_ArelLong);
      stream.next(m.Object_ArelLat);
      stream.next(m.Object_Class);
      stream.next(m.Object_Length);
      stream.next(m.Object_Width);
      stream.next(m.Object_ProbOfExist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::object_<ContainerAllocator>& v)
  {
    s << indent << "Object_ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Object_ID);
    s << indent << "Object_DistLong: ";
    Printer<float>::stream(s, indent + "  ", v.Object_DistLong);
    s << indent << "Object_DistLat: ";
    Printer<float>::stream(s, indent + "  ", v.Object_DistLat);
    s << indent << "Object_VrelLong: ";
    Printer<float>::stream(s, indent + "  ", v.Object_VrelLong);
    s << indent << "Object_VrelLat: ";
    Printer<float>::stream(s, indent + "  ", v.Object_VrelLat);
    s << indent << "Object_DynProp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Object_DynProp);
    s << indent << "Object_ArelLong: ";
    Printer<float>::stream(s, indent + "  ", v.Object_ArelLong);
    s << indent << "Object_ArelLat: ";
    Printer<float>::stream(s, indent + "  ", v.Object_ArelLat);
    s << indent << "Object_Class: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Object_Class);
    s << indent << "Object_Length: ";
    Printer<float>::stream(s, indent + "  ", v.Object_Length);
    s << indent << "Object_Width: ";
    Printer<float>::stream(s, indent + "  ", v.Object_Width);
    s << indent << "Object_ProbOfExist: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Object_ProbOfExist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_OBJECT_H
