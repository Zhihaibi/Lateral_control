# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/objects.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import common_msgs.msg
import std_msgs.msg

class objects(genpy.Message):
  _md5sum = "ed31e297e0290d75c5fb045bbeea74cb"
  _type = "common_msgs/objects"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header  header
int32 num                                #目标数量
object[] objects                         #目标描述

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: common_msgs/object
uint32 Object_ID                        #目标的ID编号
float32 Object_DistLong                 #目标的纵向距离
float32 Object_DistLat                  #目标的横向距离
float32 Object_VrelLong                 #目标的纵向相对速度
float32 Object_VrelLat                  #目标的横向相对速度
uint32 Object_DynProp                   #目标的运动状态
float32 Object_ArelLong                 #目标的纵向加速度
float32 Object_ArelLat                  #目标的横向加速度
uint32 Object_Class                     #目标的分类
float32 Object_Length                   #目标的长度
float32 Object_Width                    #目标的宽度
uint32 Object_ProbOfExist               #目标置信度
"""
  __slots__ = ['header','num','objects']
  _slot_types = ['std_msgs/Header','int32','common_msgs/object[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,num,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(objects, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.num is None:
        self.num = 0
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.num = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_I4fI2fI2fI().pack(_x.Object_ID, _x.Object_DistLong, _x.Object_DistLat, _x.Object_VrelLong, _x.Object_VrelLat, _x.Object_DynProp, _x.Object_ArelLong, _x.Object_ArelLat, _x.Object_Class, _x.Object_Length, _x.Object_Width, _x.Object_ProbOfExist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = common_msgs.msg.object()
        _x = val1
        start = end
        end += 48
        (_x.Object_ID, _x.Object_DistLong, _x.Object_DistLat, _x.Object_VrelLong, _x.Object_VrelLat, _x.Object_DynProp, _x.Object_ArelLong, _x.Object_ArelLat, _x.Object_Class, _x.Object_Length, _x.Object_Width, _x.Object_ProbOfExist,) = _get_struct_I4fI2fI2fI().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num
      buff.write(_get_struct_i().pack(_x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_I4fI2fI2fI().pack(_x.Object_ID, _x.Object_DistLong, _x.Object_DistLat, _x.Object_VrelLong, _x.Object_VrelLat, _x.Object_DynProp, _x.Object_ArelLong, _x.Object_ArelLat, _x.Object_Class, _x.Object_Length, _x.Object_Width, _x.Object_ProbOfExist))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = common_msgs.msg.object()
        _x = val1
        start = end
        end += 48
        (_x.Object_ID, _x.Object_DistLong, _x.Object_DistLat, _x.Object_VrelLong, _x.Object_VrelLat, _x.Object_DynProp, _x.Object_ArelLong, _x.Object_ArelLat, _x.Object_Class, _x.Object_Length, _x.Object_Width, _x.Object_ProbOfExist,) = _get_struct_I4fI2fI2fI().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I4fI2fI2fI = None
def _get_struct_I4fI2fI2fI():
    global _struct_I4fI2fI2fI
    if _struct_I4fI2fI2fI is None:
        _struct_I4fI2fI2fI = struct.Struct("<I4fI2fI2fI")
    return _struct_I4fI2fI2fI
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
